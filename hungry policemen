void solve()
int n,m;
cin>>n>>m;
vector<pair<int, int>> adj [n+1];
for(int i=0;i<m;i++)
{
int a,b,w;
cin>>a>>b>>w;
adj[a].pb({b, w});
adj[b].pb({a, w});
}
int k;
cin>>k;
vector<int> v(n+1,-1);
priority_queue<pair<int, int>> pq; for (int i=0;i<k;i++)
{
int a,b;
cin>>a>>b;
v[a]=b;
pq.push({b, a});
}
while (!pq.empty())
{
int w-pq.top().first;
int node=pq.top().second;
pq.pop();
for (auto i: adj[node ])
{
int newnode=i.first;
int len-i.second;
if(w-len>v[newnode])
v [newnode]=w-len;
}
pq.push({v[newnode], newnode});
}
}

int cnt=0;
for(int i=1;i<=n;i++)
{
if (v[i]>=0) cnt++;
} cout<<cnt<<endl;
}
